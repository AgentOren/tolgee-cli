/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 * Screenshots of the key
 * @export
 * @interface ScreenshotModel
 */
export interface ScreenshotModel {
  /**
   *
   * @type {number}
   * @memberof ScreenshotModel
   */
  id: number;
  /**
     * File name, which may be downloaded from the screenshot path.

When images are secured. Encrypted timestamp is appended to the filename.    
  
     * @type {string}
     * @memberof ScreenshotModel
     */
  filename: string;
  /**
     * Thumbnail file name, which may be downloaded from the screenshot path.

When images are secured. Encrypted timestamp is appended to the filename.    
  
     * @type {string}
     * @memberof ScreenshotModel
     */
  thumbnail: string;
  /**
   *
   * @type {string}
   * @memberof ScreenshotModel
   */
  fileUrl: string;
  /**
   *
   * @type {string}
   * @memberof ScreenshotModel
   */
  thumbnailUrl: string;
  /**
   *
   * @type {Date}
   * @memberof ScreenshotModel
   */
  createdAt?: Date;
}

/**
 * Check if a given object implements the ScreenshotModel interface.
 */
export function instanceOfScreenshotModel(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "filename" in value;
  isInstance = isInstance && "thumbnail" in value;
  isInstance = isInstance && "fileUrl" in value;
  isInstance = isInstance && "thumbnailUrl" in value;

  return isInstance;
}

export function ScreenshotModelFromJSON(json: any): ScreenshotModel {
  return ScreenshotModelFromJSONTyped(json, false);
}

export function ScreenshotModelFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ScreenshotModel {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    filename: json["filename"],
    thumbnail: json["thumbnail"],
    fileUrl: json["fileUrl"],
    thumbnailUrl: json["thumbnailUrl"],
    createdAt: !exists(json, "createdAt")
      ? undefined
      : new Date(json["createdAt"]),
  };
}

export function ScreenshotModelToJSON(value?: ScreenshotModel | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    filename: value.filename,
    thumbnail: value.thumbnail,
    fileUrl: value.fileUrl,
    thumbnailUrl: value.thumbnailUrl,
    createdAt:
      value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
  };
}
