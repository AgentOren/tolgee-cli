/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface LanguageDto
 */
export interface LanguageDto {
  /**
   * Language name in english
   * @type {string}
   * @memberof LanguageDto
   */
  name: string;
  /**
   * Language tag according to BCP 47 definition
   * @type {string}
   * @memberof LanguageDto
   */
  originalName: string;
  /**
   * Language name in this language
   * @type {string}
   * @memberof LanguageDto
   */
  tag: string;
  /**
   * Language flag emoji as UTF-8 emoji
   * @type {string}
   * @memberof LanguageDto
   */
  flagEmoji?: string;
}

/**
 * Check if a given object implements the LanguageDto interface.
 */
export function instanceOfLanguageDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "originalName" in value;
  isInstance = isInstance && "tag" in value;

  return isInstance;
}

export function LanguageDtoFromJSON(json: any): LanguageDto {
  return LanguageDtoFromJSONTyped(json, false);
}

export function LanguageDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): LanguageDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json["name"],
    originalName: json["originalName"],
    tag: json["tag"],
    flagEmoji: !exists(json, "flagEmoji") ? undefined : json["flagEmoji"],
  };
}

export function LanguageDtoToJSON(value?: LanguageDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    originalName: value.originalName,
    tag: value.tag,
    flagEmoji: value.flagEmoji,
  };
}
