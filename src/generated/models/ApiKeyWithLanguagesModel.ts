/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ApiKeyWithLanguagesModel
 */
export interface ApiKeyWithLanguagesModel {
  /**
     * Languages for which user has translate permission.

If null, all languages are permitted.
  
     * @type {Array<number>}
     * @memberof ApiKeyWithLanguagesModel
     */
  permittedLanguageIds?: Array<number>;
  /**
   *
   * @type {number}
   * @memberof ApiKeyWithLanguagesModel
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithLanguagesModel
   */
  userFullName?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithLanguagesModel
   */
  projectName: string;
  /**
   *
   * @type {Set<string>}
   * @memberof ApiKeyWithLanguagesModel
   */
  scopes: Set<string>;
  /**
   *
   * @type {number}
   * @memberof ApiKeyWithLanguagesModel
   */
  projectId: number;
  /**
   *
   * @type {number}
   * @memberof ApiKeyWithLanguagesModel
   */
  lastUsedAt?: number;
  /**
   *
   * @type {number}
   * @memberof ApiKeyWithLanguagesModel
   */
  expiresAt?: number;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithLanguagesModel
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKeyWithLanguagesModel
   */
  description: string;
}

/**
 * Check if a given object implements the ApiKeyWithLanguagesModel interface.
 */
export function instanceOfApiKeyWithLanguagesModel(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "projectName" in value;
  isInstance = isInstance && "scopes" in value;
  isInstance = isInstance && "projectId" in value;
  isInstance = isInstance && "description" in value;

  return isInstance;
}

export function ApiKeyWithLanguagesModelFromJSON(
  json: any
): ApiKeyWithLanguagesModel {
  return ApiKeyWithLanguagesModelFromJSONTyped(json, false);
}

export function ApiKeyWithLanguagesModelFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ApiKeyWithLanguagesModel {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    permittedLanguageIds: !exists(json, "permittedLanguageIds")
      ? undefined
      : json["permittedLanguageIds"],
    id: json["id"],
    userFullName: !exists(json, "userFullName")
      ? undefined
      : json["userFullName"],
    projectName: json["projectName"],
    scopes: json["scopes"],
    projectId: json["projectId"],
    lastUsedAt: !exists(json, "lastUsedAt") ? undefined : json["lastUsedAt"],
    expiresAt: !exists(json, "expiresAt") ? undefined : json["expiresAt"],
    username: !exists(json, "username") ? undefined : json["username"],
    description: json["description"],
  };
}

export function ApiKeyWithLanguagesModelToJSON(
  value?: ApiKeyWithLanguagesModel | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    permittedLanguageIds: value.permittedLanguageIds,
    id: value.id,
    userFullName: value.userFullName,
    projectName: value.projectName,
    scopes: Array.from(value.scopes as Set<any>),
    projectId: value.projectId,
    lastUsedAt: value.lastUsedAt,
    expiresAt: value.expiresAt,
    username: value.username,
    description: value.description,
  };
}
