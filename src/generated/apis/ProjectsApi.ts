/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PagedModelProjectActivityModel,
    PagedModelProjectActivityModelFromJSON,
    PagedModelProjectActivityModelToJSON,
    ProjectStatsModel,
    ProjectStatsModelFromJSON,
    ProjectStatsModelToJSON,
} from '../models';

export interface ProjectsApiGetActivity1Request {
    page?: number;
    size?: number;
    sort?: Array<string>;
    ak?: string;
}

export interface ProjectsApiGetProjectDailyActivity1Request {
    ak?: string;
}

export interface ProjectsApiGetProjectStats1Request {
    ak?: string;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Returns project history
     */
    async getActivity1Raw(requestParameters: ProjectsApiGetActivity1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PagedModelProjectActivityModel>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelProjectActivityModelFromJSON(jsonValue));
    }

    /**
     * Returns project history
     */
    async getActivity1(requestParameters: ProjectsApiGetActivity1Request = {}, initOverrides?: RequestInit): Promise<PagedModelProjectActivityModel> {
        const response = await this.getActivity1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns project daily amount of events
     */
    async getProjectDailyActivity1Raw(requestParameters: ProjectsApiGetProjectDailyActivity1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: number; }>> {
        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/stats/daily-activity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns project daily amount of events
     */
    async getProjectDailyActivity1(requestParameters: ProjectsApiGetProjectDailyActivity1Request = {}, initOverrides?: RequestInit): Promise<{ [key: string]: number; }> {
        const response = await this.getProjectDailyActivity1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns project stats
     */
    async getProjectStats1Raw(requestParameters: ProjectsApiGetProjectStats1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectStatsModel>> {
        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectStatsModelFromJSON(jsonValue));
    }

    /**
     * Returns project stats
     */
    async getProjectStats1(requestParameters: ProjectsApiGetProjectStats1Request = {}, initOverrides?: RequestInit): Promise<ProjectStatsModel> {
        const response = await this.getProjectStats1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
