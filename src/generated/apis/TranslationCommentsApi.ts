/* tslint:disable */
/* eslint-disable */
/**
 * Tolgee API 
 * Tolgee Server API reference
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PagedModelTranslationCommentModel,
    PagedModelTranslationCommentModelFromJSON,
    PagedModelTranslationCommentModelToJSON,
    TranslationCommentDto,
    TranslationCommentDtoFromJSON,
    TranslationCommentDtoToJSON,
    TranslationCommentModel,
    TranslationCommentModelFromJSON,
    TranslationCommentModelToJSON,
    TranslationCommentWithLangKeyDto,
    TranslationCommentWithLangKeyDtoFromJSON,
    TranslationCommentWithLangKeyDtoToJSON,
    TranslationWithCommentModel,
    TranslationWithCommentModelFromJSON,
    TranslationWithCommentModelToJSON,
} from '../models';

export interface TranslationCommentsApiCreate5Request {
    translationId: number;
    translationCommentDto: TranslationCommentDto;
    ak?: string;
}

export interface TranslationCommentsApiCreate7Request {
    translationCommentWithLangKeyDto: TranslationCommentWithLangKeyDto;
    ak?: string;
}

export interface TranslationCommentsApiDelete3Request {
    commentId: number;
    ak?: string;
}

export interface TranslationCommentsApiGet2Request {
    translationId: number;
    commentId: number;
    ak?: string;
}

export interface TranslationCommentsApiGetAll4Request {
    translationId: number;
    page?: number;
    size?: number;
    sort?: Array<string>;
    ak?: string;
}

export interface TranslationCommentsApiSetState1Request {
    commentId: number;
    state: SetState1StateEnum;
    ak?: string;
}

export interface TranslationCommentsApiUpdate1Request {
    commentId: number;
    translationCommentDto: TranslationCommentDto;
    ak?: string;
}

/**
 * 
 */
export class TranslationCommentsApi extends runtime.BaseAPI {

    /**
     * Creates a translation comment
     */
    async create5Raw(requestParameters: TranslationCommentsApiCreate5Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TranslationCommentModel>> {
        if (requestParameters.translationId === null || requestParameters.translationId === undefined) {
            throw new runtime.RequiredError('translationId','Required parameter requestParameters.translationId was null or undefined when calling create5.');
        }

        if (requestParameters.translationCommentDto === null || requestParameters.translationCommentDto === undefined) {
            throw new runtime.RequiredError('translationCommentDto','Required parameter requestParameters.translationCommentDto was null or undefined when calling create5.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/projects/translations/{translationId}/comments`.replace(`{${"translationId"}}`, encodeURIComponent(String(requestParameters.translationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslationCommentDtoToJSON(requestParameters.translationCommentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationCommentModelFromJSON(jsonValue));
    }

    /**
     * Creates a translation comment
     */
    async create5(requestParameters: TranslationCommentsApiCreate5Request, initOverrides?: RequestInit): Promise<TranslationCommentModel> {
        const response = await this.create5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a translation comment. Empty translation is stored, when not exists.
     */
    async create7Raw(requestParameters: TranslationCommentsApiCreate7Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TranslationWithCommentModel>> {
        if (requestParameters.translationCommentWithLangKeyDto === null || requestParameters.translationCommentWithLangKeyDto === undefined) {
            throw new runtime.RequiredError('translationCommentWithLangKeyDto','Required parameter requestParameters.translationCommentWithLangKeyDto was null or undefined when calling create7.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/projects/translations/create-comment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranslationCommentWithLangKeyDtoToJSON(requestParameters.translationCommentWithLangKeyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationWithCommentModelFromJSON(jsonValue));
    }

    /**
     * Creates a translation comment. Empty translation is stored, when not exists.
     */
    async create7(requestParameters: TranslationCommentsApiCreate7Request, initOverrides?: RequestInit): Promise<TranslationWithCommentModel> {
        const response = await this.create7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the translation comment
     */
    async delete3Raw(requestParameters: TranslationCommentsApiDelete3Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling delete3.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/translations/{translationId}/comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the translation comment
     */
    async delete3(requestParameters: TranslationCommentsApiDelete3Request, initOverrides?: RequestInit): Promise<void> {
        await this.delete3Raw(requestParameters, initOverrides);
    }

    /**
     * Returns single translation comment
     */
    async get2Raw(requestParameters: TranslationCommentsApiGet2Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TranslationCommentModel>> {
        if (requestParameters.translationId === null || requestParameters.translationId === undefined) {
            throw new runtime.RequiredError('translationId','Required parameter requestParameters.translationId was null or undefined when calling get2.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling get2.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/translations/{translationId}/comments/{commentId}`.replace(`{${"translationId"}}`, encodeURIComponent(String(requestParameters.translationId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationCommentModelFromJSON(jsonValue));
    }

    /**
     * Returns single translation comment
     */
    async get2(requestParameters: TranslationCommentsApiGet2Request, initOverrides?: RequestInit): Promise<TranslationCommentModel> {
        const response = await this.get2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns translation comments of translation
     */
    async getAll4Raw(requestParameters: TranslationCommentsApiGetAll4Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PagedModelTranslationCommentModel>> {
        if (requestParameters.translationId === null || requestParameters.translationId === undefined) {
            throw new runtime.RequiredError('translationId','Required parameter requestParameters.translationId was null or undefined when calling getAll4.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/translations/{translationId}/comments`.replace(`{${"translationId"}}`, encodeURIComponent(String(requestParameters.translationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelTranslationCommentModelFromJSON(jsonValue));
    }

    /**
     * Returns translation comments of translation
     */
    async getAll4(requestParameters: TranslationCommentsApiGetAll4Request, initOverrides?: RequestInit): Promise<PagedModelTranslationCommentModel> {
        const response = await this.getAll4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets state of translation comment
     */
    async setState1Raw(requestParameters: TranslationCommentsApiSetState1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TranslationCommentModel>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling setState1.');
        }

        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling setState1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/projects/translations/{translationId}/comments/{commentId}/set-state/{state}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"state"}}`, encodeURIComponent(String(requestParameters.state))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationCommentModelFromJSON(jsonValue));
    }

    /**
     * Sets state of translation comment
     */
    async setState1(requestParameters: TranslationCommentsApiSetState1Request, initOverrides?: RequestInit): Promise<TranslationCommentModel> {
        const response = await this.setState1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates single translation comment
     */
    async update1Raw(requestParameters: TranslationCommentsApiUpdate1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TranslationCommentModel>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling update1.');
        }

        if (requestParameters.translationCommentDto === null || requestParameters.translationCommentDto === undefined) {
            throw new runtime.RequiredError('translationCommentDto','Required parameter requestParameters.translationCommentDto was null or undefined when calling update1.');
        }

        const queryParameters: any = {};

        if (requestParameters.ak !== undefined) {
            queryParameters['ak'] = requestParameters.ak;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/projects/translations/{translationId}/comments/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TranslationCommentDtoToJSON(requestParameters.translationCommentDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranslationCommentModelFromJSON(jsonValue));
    }

    /**
     * Updates single translation comment
     */
    async update1(requestParameters: TranslationCommentsApiUpdate1Request, initOverrides?: RequestInit): Promise<TranslationCommentModel> {
        const response = await this.update1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SetState1StateEnum {
    ResolutionNotNeeded = 'RESOLUTION_NOT_NEEDED',
    NeedsResolution = 'NEEDS_RESOLUTION',
    Resolved = 'RESOLVED'
}
